/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.angrygiant.mule.mqtt;

import org.apache.commons.lang.NotImplementedException;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttTopic;
import org.junit.Assert;
import org.mule.api.ConnectionException;
import org.mule.api.MuleEvent;
import org.mule.api.callback.SourceCallback;
import org.mule.construct.Flow;

import org.junit.Test;
import org.mule.tck.AbstractMuleTestCase;
import org.mule.tck.FunctionalTestCase;
import org.mule.util.concurrent.Latch;

import java.util.Map;
import java.util.concurrent.TimeUnit;

public class MqttModuleTest extends FunctionalTestCase {

    private MqttModule mqttModule = new MqttModule();

    @Override
    protected String getConfigResources() {
        return "mule-config.xml";
    }

    @Test
    public void testPublishFlow() throws Exception {
        Flow flow = lookupFlowConstruct("testMessagePublish");
        MuleEvent event = AbstractMuleTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals("test/topic", ((MqttMuleMessage) responseEvent.getMessage().getPayload()).getTopic().getName());
        assertEquals("my payload", new String(((MqttMuleMessage) responseEvent.getMessage().getPayload()).getMessage().getPayload()));
    }

    @Test
    public void testSubscribeFlow() throws Exception {

        final MuleEvent event = AbstractMuleTestCase.getTestEvent(null);

        final Latch latch = new Latch();

        //We need to to subscribe and publish in different threads since PubNub is not a queuing
        //system, so messages are only received to subscribers who are actively listening
        final Latch pubLatch = new Latch();
        Thread t = new Thread(new Runnable() {
            public void run() {
                // Listen for Messages (Subscribe)
                pubLatch.release();
                try {
                    mqttModule.subscribe("test/subscribe", 2, new SourceCallback() {
                        public Object process() throws Exception {
                            latch.release();
                            throw new NotImplementedException("This process has not been implemented!!!");
                        }

                        public Object process(Object o) throws Exception {
                            if (o instanceof MqttMuleMessage) {
                                MqttMuleMessage message = (MqttMuleMessage) o;

                                System.out.println("Received message from " + ((MqttMuleMessage) o).getTopic().getName());
                                assertTrue(message.getTopic().getName().equals("test/subscribe"));

                                System.out.println("Message: " + new String(message.getMessage().getPayload()));
                                assertTrue(new String(message.getMessage().getPayload()).equals("this is a message"));
                            }
                            latch.release();
                            return null;  //To change body of implemented methods use File | Settings | File Templates.
                        }

                        public Object process(Object o, Map<String, Object> stringObjectMap) throws Exception {
                            latch.release();
                            throw new NotImplementedException("This process has not been implemented!!!");
                        }
                    });
                } catch (ConnectionException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
            }
        });

        t.start();
        //We wait for the thread to start before publishing a message. This ensures that our
        //subscribe is listening before the message is published
        Assert.assertTrue("Subscriber was not registered in a separate thread", pubLatch.await(5, TimeUnit.SECONDS));

        String topicName = "test/subscribe";
        int qoh = 2;
        String clientId = "muletest";

        MqttConnectOptions options = new MqttConnectOptions();
        options.setCleanSession(false);

        MqttClient client = new MqttClient("tcp://localhost:1883", clientId);
        client.connect(options);

        MqttTopic topic = client.getTopic(topicName);
        topic.publish("this is a message".getBytes(), qoh, false);

        Assert.assertTrue("Message was not received on topic: " + topicName, latch.await(30, TimeUnit.SECONDS));

        client.disconnect();
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name) {
        return (Flow) AbstractMuleTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
